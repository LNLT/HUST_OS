设备驱动程序是内核的一部分，它完成以下的功能：
（1） 对设备初始化和释放.
（2） 把数据从内核传送到硬件和从硬件读取数据.
（3） 读取应用程序传送给设备文件的数据和回送应用程序请求的数据.
（4） 检测和处理设备出现的错误.


在设备驱动程序中有一个非常重要的结构file_operations，该结构的每个域都对应着一个系统调用。
struct file_operations {
        struct module *owner;
	第一个 file_operations 成员根本不是一个操作; 
	它是一个指向拥有这个结构的模块的指针. 这个成员用来在它的操作还在被使用时阻止模块被卸载. 
	它被简单初始化为 THIS_MODULE, 一个在 <linux/module.h> 中定义的宏.

	ssize_t (*read) (struct file * filp, char __user * buffer, size_t    size , loff_t *  p);
(指针参数 filp 为进行读取信息的目标文件，指针参数buffer 为对应放置信息的缓冲区（即用户空间内存地址），
参数size为要读取的信息长度，参数 p 为读的位置相对于文件开头的偏移，在读取信息后，这个指针一般都会移动，移动的值为要读取信息的长度值）
这个函数用来从设备中获取数据. 在这个位置的一个空指针导致 read 系统调用以 -EINVAL("Invalid argument") 失败.
 	一个非负返回值代表了成功读取的字节数( 返回值是一个 "signed size" 类型, 常常是目标平台本地的整数类型).

        ssize_t (*write) (struct file *  filp, const char __user *   buffer, size_t  count, loff_t * ppos);
(参数filp为目标文件结构体指针，buffer为要写入文件的信息缓冲区，count为要写入信息的长度，
ppos为当前的偏移位置，这个值通常是用来判断写文件是否越界）
发送数据给设备. 如果 NULL, -EINVAL 返回给调用 write 系统调用的程序. 如果非负, 返回值代表成功写的字节数.
(注：这个操作和上面的对文件进行读的操作均为阻塞操作）

	int (*open) (struct inode * inode , struct file *  filp ) ;
(inode 为文件节点,这个节点只有一个，无论用户打开多少个文件，都只是对应着一个inode结构；
但是filp就不同，只要打开一个文件，就对应着一个file结构体，file结构体通常用来追踪文件在运行时的状态信息）
 尽管这常常是对设备文件进行的第一个操作, 不要求驱动声明一个对应的方法. 如果这个项是 NULL, 设备打开一直成功, 但是你的驱动不会得到通知.

	int (*release) (struct inode *, struct file *);
release ()函数当最后一个打开设备的用户进程执行close()系统调用的时候，内核将调用驱动程序release()函数：
void release(struct inode inode,struct file *file),release函数的主要任务是清理未结束的输入输出操作，释放资源，用户自定义排他标志的复位等。
    	在文件结构被释放时引用这个操作. 如同 open, release 可以为 NULL.

};

注册设备：
int register_chrdev(unsigned int major, const char *name,const struct file_operations *fops)
register_chrdev() -为字符设备注册一个主号码。
major:用于动态分配的主要设备号或0;
	major == 0，将动态分配一个设备号并返回它的号码。
	major > 0，将尝试使用给定的数字设置设备号，成功将返回零，否则返回负值。
name:这一系列设备的名称
fops:与此设备相关联的文件操作  file_operations后自定义名字
返回值：正确注册完后返回分配的主设备号/0，否则为负值。


注销设备
#include <linux.fs.h>
int   unregister_chrdev(unsigned int major, const char * name)
注销设备驱动程序的内核函数
major:主设备号
name:设备文件
返回值：major 值若大于 linux/major.h中声明的最大值 (#define MAX_CHRDEV 255)，返回 EINVAL的负值 (-EINVAL)。指定了 major的值后，若将要注销的 major 值并不是注册的设备驱动程序，返回 EINVAL的负值 ( -EINVAL)。正常注销则返回 0值。


init_module是默认的模块的入口,如果你想指定其他的函数作为模块的入口就需要module_init函数来指定,比如
module_init(your_func);
其中your_func是你编写的一个函数的名称.
__init :linux中把一些启动及初始化时候用的数据用__init标识，然后在适当的时候把它们释放，回收内存。


调用try_module_get之后，当设备在使用时，管理此设备的模块将不能被卸载。只有当设备不再被使用时（调用module_put），模块才允许被卸载

copy_to_user函数:内核空间-->用户空间
unsigned long copy_to_user(void *to, const void *from, unsigned long n)
to:目标地址（用户空间）
from:源地址（内核空间）
n:将要拷贝数据的字节数
返回：成功返回0，失败返回没有拷贝成功的数据字节数


copy_from_user函数:用户空间-->内核空间
unsigned long copy_from_user(void *to, const void *from, unsigned long n);
to:目标地址（内核空间）
from:源地址（用户空间）
n:将要拷贝数据的字节数
返回：成功返回0，失败返回没有拷贝成功的数据字节数
get_user宏
int get_user(data, ptr);
data:可以是字节、半字、字、双字类型的内核变量
ptr:用户空间内存指针
返回：成功返回0，失败返回非0

